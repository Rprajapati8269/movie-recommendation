# -*- coding: utf-8 -*-
"""movie_recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12TtVtceBKX-hdWEZh23Vjz2A5VQ7LRZf

Loading the dataset
"""

import pandas as pd
import numpy as np

data = pd.read_csv('/content/drive/MyDrive/movie/movies_data.csv')
data

print(data.columns)

import pandas as pd


data = pd.read_csv('/content/drive/MyDrive/movie/movies_data.csv')


data.dropna(inplace=True)
data.drop_duplicates(inplace=True)


data = pd.get_dummies(data, columns=['Genre'], prefix='genre', drop_first=True)


data['Year'] = data['Year'].astype(int)


print(data.head())


data.to_csv('preprocessed_movies_data.csv', index=False)

"""Splitting train and test"""

from sklearn.model_selection import train_test_split


data = pd.read_csv('preprocessed_movies_data.csv')


X = data.drop('Rating', axis=1)
y = data['Rating']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)




print("Training set shape:", X_train.shape, y_train.shape)
print("Testing set shape:", X_test.shape, y_test.shape)


# X_train.to_csv('X_train.csv', index=False)
# X_test.to_csv('X_test.csv', index=False)
# y_train.to_csv('y_train.csv', index=False)
# y_test.to_csv('y_test.csv', index=False)

"""Using knn model"""

import pandas as pd
from sklearn.neighbors import NearestNeighbors


data = pd.read_csv('preprocessed_movies_data.csv')


desired_year = int(input("Enter the desired year: "))
min_rating = float(input("Enter the minimum rating you prefer (e.g., 5.0): "))


filtered_movies = data[(data['Year'] == desired_year) & (data['Rating'] >= min_rating)]

if not filtered_movies.empty:

    X = filtered_movies[['Year', 'Rating']]


    num_neighbors = 5
    knn = NearestNeighbors(n_neighbors=num_neighbors)


    knn.fit(X)


    _, indices = knn.kneighbors([[desired_year, min_rating]])


    indices = indices.flatten()


    #print(f"Recommended Movies in {desired_year} with a minimum rating of {min_rating} (in descending order of rating):")
    sorted_indices = sorted(indices, key=lambda idx: -filtered_movies.iloc[idx]['Rating'])  # Sort in descending order
    for idx in sorted_indices:
        print(f"{filtered_movies.iloc[idx]['Name']} (Rating: {filtered_movies.iloc[idx]['Rating']})")
else:
    print("No movies found matching your criteria.")

"""calculating mean absolute error"""

import pandas as pd
from sklearn.metrics import mean_absolute_error


data = pd.read_csv('preprocessed_movies_data.csv')


desired_year = int(input("Enter the desired year: "))
min_rating = float(input("Enter the minimum rating you prefer (e.g., 5.0): "))

filtered_movies = data[(data['Year'] == desired_year) & (data['Rating'] >= min_rating)]

if not filtered_movies.empty:

    actual_ratings = filtered_movies['Rating']


    mae = mean_absolute_error(actual_ratings, predicted_ratings)

    print(f"Mean Absolute Error (MAE) for recommended ratings: {mae:.2f}")
else:
    print("No movies found matching your criteria.")